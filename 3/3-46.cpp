
struct Watt
{
    unsigned int v;
}; 

Watt operator""_w(unsigned long long v)
{
     return{(unsigned int)v}; 
}
int main()
{ 
    Watt capacity=1024_w; 
}

/*
不过必须注意的是，在C++11中，标准要求声明字面量操作符有一定的规则，该规则跟字面量 的“类型”密切相关。
C++11中具体规则如下： 
❑如果字面量为整型数，那么字面量操作符函数只可接受unsigned long long或者constchar*为其参数当unsigned long long无法容纳该字面量 的时候，编译器会自动将该字面量转化为以\0为结 束符的字符串，并调用以const char*为参数的版本进行处理。 
❑如果字面量为浮点型数，则字面量操作符函数只可接受long double或者const char*为参数。 const char*版本的调用规则同整型的一样（过长则使用const char*版本）。
❑如果字面量为字符串，则字面量操作符函数函数只可接受const char*,size_t为参数（已知长度 的字符串）。

总体上来说，用户自定义字面量为代码书写带 来了极大的便利。


此外，在使用这个特性的时候， 应该注意以下几点： 
❑在字面量操作符函数的声明中， operator""与用户自定义后缀之间必须有空格。
❑后缀建议以下划线开始。不宜使用非下划线 后缀的用户自定义字符串常量，否则会被编译器警 告。
当然，这也很好理解，因为如果重用形如 201203L这样的字面量，后缀“L”无疑会引起一 些混乱的状况。为了避免混乱，程序员最好只使用 下划线开始的后缀名。
*/




